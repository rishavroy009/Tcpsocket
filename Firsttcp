#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <thread>
#include <cstring>
#include <fstream>
#include <vector>

const int PORT = 9000;
const int MAX_CLIENTS = 5;
const int BUFFER_SIZE = 1024 * 1024; // 1 MB buffer

void handleClient(int clientSocket, int clientNum) {
    char buffer[BUFFER_SIZE];
    std::string fileName = "client" + std::to_string(clientNum) + ".dat";
    std::ofstream outputFile(fileName, std::ios::binary);

    if (!outputFile) {
        std::cerr << "Cannot open output file: " << fileName << std::endl;
        close(clientSocket);
        return;
    }

    int bytesRead;
    while ((bytesRead = read(clientSocket, buffer, BUFFER_SIZE)) > 0) {
        outputFile.write(buffer, bytesRead);
    }

    if (bytesRead < 0) {
        std::cerr << "Error reading from client " << clientNum << std::endl;
    } else {
        std::cout << "Received file from client " << clientNum << std::endl;
    }

    outputFile.close();
    close(clientSocket);
}

int main() {
    int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == 0) {
        std::cerr << "Socket failed" << std::endl;
        return -1;
    }

    struct sockaddr_in address;
    int addrlen = sizeof(address);

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(serverSocket, (struct sockaddr *)&address, sizeof(address)) < 0) {
        std::cerr << "Bind failed" << std::endl;
        close(serverSocket);
        return -1;
    }

    if (listen(serverSocket, MAX_CLIENTS) < 0) {
        std::cerr << "Listen failed" << std::endl;
        close(serverSocket);
        return -1;
    }

    std::cout << "Server listening on port " << PORT << std::endl;

    std::vector<std::thread> clientThreads;
    int clientNum = 0;

    while (clientNum < MAX_CLIENTS) {
        int clientSocket = accept(serverSocket, (struct sockaddr *)&address, (socklen_t*)&addrlen);
        if (clientSocket < 0) {
            std::cerr << "Accept failed" << std::endl;
            continue;
        }

        clientThreads.emplace_back(handleClient, clientSocket, clientNum + 1);
        clientNum++;
    }

    // Join all threads before exiting
    for (auto& th : clientThreads) {
        if (th.joinable()) {
            th.join();
        }
    }

    close(serverSocket);
    return 0;
}

